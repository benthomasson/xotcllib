# Created at Thu Oct 23 21:25:08 EDT 2008 by ben

namespace eval ::xohtml {

    ::xodsl::LanguageClass create WidgetLibraryLanguage -superclass ::xodsl::Language

    WidgetLibraryLanguage @doc WidgetLibraryLanguage {

        Please describe the class WidgetLibraryLanguage here.
    }

    WidgetLibraryLanguage parameter {

    }

    WidgetLibraryLanguage @doc @@doc {

        Uses ClassDocLanguage to define documentation for a widget.
    }

    WidgetLibraryLanguage @arg @@doc name { The name of the widget }
    WidgetLibraryLanguage @arg @@doc doc { The ClassDocLanguage documentation script }

    WidgetLibraryLanguage @example @@doc {

        @@doc ObjectLink {

            Purpose: Creates a link to a class or object.

            Parameter: {
                object The object to link to
                root The root of the object documentation.
            }
        }
    }

    WidgetLibraryLanguage @see @@doc ClassDocLanguage 

    WidgetLibraryLanguage instproc @@doc { name doc } {

        if { ! [ string match ::* $name ] } {

            set name ::xohtml::widget::${name}
        }

        if { ! [ my isclass $name ] } { 
            ::xohtml::WidgetClass create $name -superclass ::xohtml::SimpleWidget 
        }

        #puts "$name [ namespace tail $name ] "

        $name @@doc [ namespace tail $name ] $doc
    }

    WidgetLibraryLanguage @doc defineWidget {

        Defines a new simple HtmlWidget class. Simple widgets generate one block of HTML.  The HTML is generated by the 
        htmlWidgetCode parameter. Simple widgets may build other widgets at initialization time. These child widgets
        are built using ModelBuildingLanguage in the modelCode parameter.  The modelCode is run at initialization time
        for this widget.  Each widget that is created in the modelCode gets to create their own child widgets and run
        their own initialization code.  After that completes this widget may customize the parameters on its child wigets.
        Customization can include setting values or replacing child widgets with an entirely new class of widget. Deep
        customization makes widgets very flexible.
    }

    WidgetLibraryLanguage @arg defineWidget name { The name of the widget.  If not fully-qualified (ie starts with ::) ::xohtml::widget will be used as the package. }
    WidgetLibraryLanguage @arg defineWidget parameters { The parameters for the new widget class. }
    WidgetLibraryLanguage @arg defineWidget modelCode { Initialization code for the widget using model building language. }
    WidgetLibraryLanguage @arg defineWidget htmlWidgetCode { HtmlGenerationLanguage code that generates the HTML for this widget. }

    WidgetLibraryLanguage @see defineWidget HtmlGenerationLanguage
    WidgetLibraryLanguage @see defineWidget WidgetBuilder

    WidgetLibraryLanguage @example defineWidget {

        defineWidget ObjectLink { object { root . } } { } {
           foreach anObject $object {
               a -href ${root}/[ ::xox::Package getPackageFromClass $anObject ]/[ string map {:: __ } $anObject.docs.html ] ' $anObject
               ' " "
           }
        }
    }

    WidgetLibraryLanguage instproc defineWidget { name parameters modelCode htmlWidgetCode } {

     #   puts "Defining $name"

        ::xohtml::WidgetClass defineWidget $name $parameters $modelCode $htmlWidgetCode
        return 
    }

    WidgetLibraryLanguage @doc configurePrototype {

        Configures the prototype for a widget class.  Each widget class has a prototype instance that can be used directly.
        Configuring the prototype is necessary to customize the prototype for your application.

        Deep customization is not possible with configurePrototype.
    }

    WidgetLibraryLanguage @arg configurePrototype name { The name of the widget.  If not fully-qualified ::xohtml::widget is prepended. }
    WidgetLibraryLanguage @arg configurePrototype args { Dashed args used to configure the parameters of the widget. }

    WidgetLibraryLanguage instproc configurePrototype { name args } {

        if { ! [ string match ::* $name ] } {

            set name ::xohtml::widget::${name}
        }

        eval $name configurePrototype $args
    }

    WidgetLibraryLanguage instproc destroy { args } {

        my instvar environment
        catch { $environment destroy }
    }
}
