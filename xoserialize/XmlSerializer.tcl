
namespace eval ::xoserialize { 

Class create XmlSerializer -superclass { ::xotcl::Object }
  
XmlSerializer @doc XmlSerializer {
Please describe XmlSerializer here.
}
       
XmlSerializer parameter {

} 
        

XmlSerializer @doc buildObject { 
buildObject does ...
            node -
}

XmlSerializer instproc buildObject { node } {
        set object [ Object new ]

        foreach methodNode [ $node childNodes ] {

            set method [ $methodNode nodeName ]

            puts $method

            set args ""

            foreach argNode [ $methodNode childNodes ] {

                set arg [ my extractValue $argNode ]
                puts $arg
                lappend args $arg
            }

            eval $object $method $args
        }

        return $object
    
}


XmlSerializer @doc deserialize { 
deserialize does ...
            xml -
}

XmlSerializer instproc deserialize { xml } {
       set document [dom parse $xml]
       set root     [$document documentElement]

       return [ my buildObject [ $root childNodes ] ]
    
}


XmlSerializer @doc extractValue { 
extractValue does ...
            node -
}

XmlSerializer instproc extractValue { node } {
       set childNodes [ $node childNodes ]

       if { [ llength $childNodes ] == 1 } {
       
       set value [ string trim [ $childNodes nodeValue ] ]

       } else {

           error "Bad node: [ $node nodeName ]"
       }

       return $value
   
}


XmlSerializer @doc serialize { 
serialize does ...
            object -
}

XmlSerializer instproc serialize { object } {
       set dom [ dom createDocument root ]
       set root [ $dom documentElement ]

       global env

       set comment [ $dom createComment "Generated by [ my info class ] $env(USER) at [ clock format [ clock seconds ] ]" ]
       my serializeObject $dom $root $object

       return "[ $comment asXML ]\n[ $root asXML ]"
    
}


XmlSerializer @doc serializeFilter { 
serializeFilter does ...
            dom - 
            objNode - 
            object - 
            aFilter -
}

XmlSerializer instproc serializeFilter { dom objNode object aFilter } {
        set guard [ $object info filterguard $aFilter ]

        my serializeMethodCall $dom $objNode filter $aFilter
        my serializeMethodCall $dom $objNode filterguard $aFilter $guard
    
}


XmlSerializer @doc serializeFilters { 
serializeFilters does ...
            dom - 
            objNode - 
            object -
}

XmlSerializer instproc serializeFilters { dom objNode object } {
        foreach aFilter [ $object info filter ] {

            my serializeFilter $dom $objNode $object $aFilter
        }
    
}


XmlSerializer @doc serializeMethodCall { 
serializeMethodCall does ...
            dom - 
            parentNode - 
            method - 
            args -
}

XmlSerializer instproc serializeMethodCall { dom parentNode method args } {
        set methodNode [ $dom createElement $method ]
        $parentNode appendChild $methodNode

        foreach arg $args {

            set argNode [ $dom createElement arg ]
            $argNode appendChild [ $dom createCDATASection $arg ]
            $methodNode appendChild $argNode
        }
    
}


XmlSerializer @doc serializeMixin { 
serializeMixin does ...
            dom - 
            objNode - 
            object - 
            aMixin -
}

XmlSerializer instproc serializeMixin { dom objNode object aMixin } {
        my serializeMethodCall $dom $objNode mixin add $aMixin
    
}


XmlSerializer @doc serializeMixins { 
serializeMixins does ...
            dom - 
            objNode - 
            object -
}

XmlSerializer instproc serializeMixins { dom objNode object } {
        foreach aMixin [ $object info mixin ] {

            my serializeMixin $dom $objNode $object $aMixin
        }
    
}


XmlSerializer @doc serializeNamespace { 
serializeNamespace does ...
            dom - 
            objNode - 
            object -
}

XmlSerializer instproc serializeNamespace { dom objNode object } {
        if { [ $object info hasNamespace ] } {

            my serializeMethodCall $dom $objNode requireNamespace 
        }
    
}


XmlSerializer @doc serializeObject { 
serializeObject does ...
            dom - 
            root - 
            object -
}

XmlSerializer instproc serializeObject { dom root object } {
       set objNode [ $dom createElement Object ]
       $root appendChild $objNode
        
        set class [ $object info class ]

       my serializeMethodCall $dom $objNode class $class
       my serializeNamespace $dom $objNode $object
       my serializeVars $dom $objNode $object
       my serializeMixins $dom $objNode $object
       my serializeProcs $dom $objNode $object
       my serializeFilters $dom $objNode $object
    
}


XmlSerializer @doc serializeProc { 
serializeProc does ...
            dom - 
            objNode - 
            object - 
            aProc -
}

XmlSerializer instproc serializeProc { dom objNode object aProc } {
        set args [ $object info args $aProc ]
        set body [ $object info body $aProc ]
        set nonposargs [ $object info nonposargs $aProc ]
        set pre [ $object info pre $aProc ]
        set post [ $object info post $aProc ]
    
}


XmlSerializer @doc serializeProcs { 
serializeProcs does ...
            dom - 
            objNode - 
            object -
}

XmlSerializer instproc serializeProcs { dom objNode object } {
        foreach aProc [ $object info procs ] {

            my serializeProc $dom $objNode $object $aProc
        }
    
}


XmlSerializer @doc serializeVar { 
serializeVar does ...
            dom - 
            objNode - 
            object - 
            aVar -
}

XmlSerializer instproc serializeVar { dom objNode object aVar } {
        if [ $object array exists $aVar ] {

            set value [ $object array get $aVar ]

            my serializeMethodCall $dom $objNode array set $aVar $value

        } else {

            set value [ $object set $aVar ]

            my serializeMethodCall $dom $objNode set $aVar $value
        }
    
}


XmlSerializer @doc serializeVars { 
serializeVars does ...
            dom - 
            objNode - 
            object -
}

XmlSerializer instproc serializeVars { dom objNode object } {
        foreach aVar [ $object info vars ] {

            my serializeVar $dom $objNode $object $aVar
        }
    
}
}


